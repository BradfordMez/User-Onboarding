'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _typeof(obj) { return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FormField = exports.FormField = (function () {
  function FormField(attrs) {
    _classCallCheck(this, FormField);

    this._attrs = attrs;
    this._validators = [];
  }

  _createClass(FormField, [{
    key: 'validators',
    value: function validators() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      this._validators = args;
      return this;
    }
  }, {
    key: 'required',
    value: function required() {
      this._isRequired = true;
      return this;
    }
  }, {
    key: 'isRequired',
    value: function isRequired() {
      return this._isRequired;
    }
  }, {
    key: 'getAttributes',
    value: function getAttributes() {
      return this._attrs;
    }
  }, {
    key: 'validate',
    value: function validate(value) {
      for (var _len2 = arguments.length, rest = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        rest[_key2 - 1] = arguments[_key2];
      }

      if (typeof value === 'undefined' || value === null && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
        return this._isRequired ? {
          isValid: false,
          errors: ['The field is required.']
        } : {
          isValid: true,
          errors: []
        };
      }
      var result = this._validators.reduce(function (_ref, validator) {
        var isValid = _ref.isValid;
        var errors = _ref.errors;

        var _validator = validator.apply(undefined, [value].concat(rest));

        var valid = _validator.isValid;
        var error = _validator.error;

        if (!valid) {
          errors.push(error);
        }
        return {
          isValid: isValid && valid,
          errors: errors
        };
      }, {
        isValid: true,
        errors: []
      });
      return _extends({}, result, {
        data: value
      });
    }
  }]);

  return FormField;
})();